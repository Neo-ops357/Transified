<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Video Subtitle MVP</title>
<style>
  body {
    font-family: Arial, sans-serif;
    max-width: 600px;
    margin: 2rem auto;
    padding: 1rem;
    background: #f9f9f9;
  }
  h1 {
    text-align: center;
  }
  label, select, input {
    display: block;
    margin: 1rem 0;
    font-size: 1rem;
  }
  video {
    width: 100%;
    max-height: 360px;
    background: black;
  }
</style>
</head>
<body>

<h1>Upload Video & Choose Subtitle Language</h1>

<label for="video-upload">Select Video:</label>
<input type="file" id="video-upload" accept="video/*" />

<label for="language-select">Subtitle Language:</label>
<select id="language-select">
  <option value="en" selected>English</option>
  <option value="ru">Russian</option>
  <option value="es">Spanish</option>
  <option value="fr">French</option>
</select>

<video id="video-player" controls>
  Your browser does not support the video tag.
</video>

<script>
  const videoUpload = document.getElementById('video-upload');
  const videoPlayer = document.getElementById('video-player');
  const languageSelect = document.getElementById('language-select');

  // This is a placeholder subtitles dictionary (normally would be dynamic)
  const subtitles = {
    en: "1\n00:00:00,000 --> 00:00:04,000\nHello! This is a sample subtitle in English.",
    ru: "1\n00:00:00,000 --> 00:00:04,000\nПривет! Это пример субтитров на русском.",
    es: "1\n00:00:00,000 --> 00:00:04,000\n¡Hola! Este es un subtítulo de ejemplo en español.",
    fr: "1\n00:00:00,000 --> 00:00:04,000\nBonjour! Ceci est un sous-titre exemple en français."
  };

  // Create a track element or update if exists
  function updateSubtitles(lang) {
    // Remove existing track if any
    const existingTrack = videoPlayer.querySelector('track');
    if (existingTrack) {
      videoPlayer.removeChild(existingTrack);
    }
    // Create new track element
    const track = document.createElement('track');
    track.kind = 'subtitles';
    track.label = lang.toUpperCase();
    track.srclang = lang;
    track.default = true;

    // Create a Blob from subtitle text and set track src to it
    const blob = new Blob([subtitles[lang]], { type: 'text/vtt' });
    const url = URL.createObjectURL(blob);
    track.src = url;

    videoPlayer.appendChild(track);
  }

  // When video file uploaded, show it in the player and reset subtitles
  videoUpload.addEventListener('change', () => {
    const file = videoUpload.files[0];
    if (!file) return;
    const fileUrl = URL.createObjectURL(file);
    videoPlayer.src = fileUrl;
    updateSubtitles(languageSelect.value);
  });

  // When language changes, update subtitle track
  languageSelect.addEventListener('change', () => {
    updateSubtitles(languageSelect.value);
  });
</script>

</body>
</html>
